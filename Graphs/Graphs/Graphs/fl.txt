void floyd()
{
	vector <vector <int>> distance = getGraphMatrix();

	vector <vector <int>> root(graph.size(), vector<int>(graph.size(), -1));

	int inf = sumOfEdges();
	
	for (int k = 0; k < graph.size(); ++k)
	{
		for (int i = 0; i < graph.size(); ++i)
		{
			for (int j = 0; j < graph.size(); ++j)
			{
				if ((distance[i][k] < inf) && (distance[k][j] < inf))
				{
					if (distance[i][j] > (distance[i][k] + distance[k][j]))
					{
						distance[i][j] = distance[i][k] + distance[k][j];
						root[i][j] = k;
					}
				}
			}
		}
	}
	//востановление пути
	for (int a = 0; a < graph.size(); ++a)
	{
		for (int b = 0; b < graph.size(); ++b)
		{
			if (distance[a][b] == inf)
			{
				cout << "No path from: " << ((zero) ? a : a + 1) << " to " << ((zero) ? b : b + 1) << endl;
			}
			else
			{
				cout << "Length " << distance[a][b] << endl;

				vector <int> path;

				for (int current = a; current != -1; current = root[current][b])
				{
					path.push_back(current);
				}
				cout << "Path from " << ((zero) ? a : a + 1) << " to " << ((zero) ? b : b + 1) << ": ";
				for (size_t i = 0; i < path.size(); ++i)
				{
					cout << ((zero) ? path[i] : path[i] + 1) << ' ';
				}
				cout << ((zero) ? b : b + 1) << endl;
			}
		}
	}
}
